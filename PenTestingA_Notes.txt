\*-*/ : HTTP : 
 - dangerous methods to be found are : OPTIONS - HEAD - PUT - DELETE
 - HTTP verb tampering gives an unauthorized access to server resources using different HTTP methods 
 - nmap scripts to find HTTP verp tampering is http-methods.nse
 - msfconsole auxiliary to find this is auxiliary/scanner/http/verb_auth_bypass auxiliary/scanner/http/options *remember to use advanced searching methods*
 - apache.htaccess missonfiguration *only restricts POST request ----> any other methods are allowed to authenticate*
 - HTTP status codes are important 
 - HTTP basic authentication is vulnerable to brute forcing 
 - cookies are found to help HTTP to be stateful as it's normally stateless 
 - not finding http-only in the cookies means its vulnerable to XSS
 - focus on the expiration date of the cookie !

 

\*-*/ : important tools :
 - netcat 
 - curl 
 - wireshark or tshark or tcpdump 
 - crunch --> to generate passwords list based on a specific scheme 
 - SSLstrip --> forces https to be http --> to see usernames and passwords in plain text 
 - tcpxtract --> to extract traffic from http 
 - gifsicle --> to add something to an img binary *like an executable command*
 - tr --> to modify strings *add or remove chars*

/*-*/ : HTML injection : 
 - try some inputs to see if there are filters 
 - look at the source and try to escape filters then the "" or <> 
 - using cgi.escape() as a filter is a vulnerability 


/'-'\ : Command injection :
 - when user input is sent through a command on a shell  
 - /usr/share/webshells
 - remember to remove the guard bit when creating php meterpreter shell with msfvenom
 - you can download your backdoor anywhere on the system but you have to execute it (for exmp : php -f /backdoor.php)
 - you can create a shell using netcat command if there are no writable dirs in the system
 - read this: https://securityweekly.com/2011/10/23/python-one-line-shell-code/ ,
 and this : http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
 

'-' : XSS : 
 - types : 
	 . type 1 *stored* : is stored on the server 
	 . type 2 *reflected* : is not stored and requires a client being interactive to work 
	 . type 0 *DOM based* : based on DOM to directly execute commands
 - you can use event handlers to undirectly run your script 	 



._. : File Upload Vuln :
 - nothing much to talk about just remember how to pass a file upload check filter using burp suite *or any other method*

 -- bypassing a blacklist filter requires a change in extension as well as .htaccess file by adding the following :
	 addType application/x-httpd-php extension
 if AllowOverride is turned on to ALL --

 - forgetting to block php3,4,5 extensions is a vuln
 - there can be a misconfiguration in apache service which allows double extensions 
 - you can bypass getimgsize() by adding the php shell command to the img binaries using gifsicle --comment and tr
 - you can use null byte injection by using burp to replace the name with name.phpA.gif and then remove the char from the hex values 


0_0 : Remote File Inclusion :
 - when you can include a remote file throgh a php parameter 
 - requires poor configuration of php and rarely found unlike the LFI *which is rarely found aswell xDDDD* 
 - can happen only if allow_url_include = On
 - if there's a forced extension you can just change the name


;_; : Local File Inculusion :
 - is to	include a local file through php 
 - LFI + File Upload = RCE 
 - you can use null injection if the file type is appended *using %00*
 - you can edit logs using burp and LFI *apache log poisoning*
 - you can poison ssh logs as auth.log file is readable to everybody,so you can execute a php shell commmand if you have LFI 

0_0 : unvalidated redirects :
 - is redirecting the user to ur specified site through a php parameter 
 - sometimes you need to encode the url ur redirecting into to deceive the end user
 - you can beat the base64 encoding easily , which is a common method to hide the real url 
 - some programmers use hash to hide url , and u can easily beat it knowing the right hash algorithm used 
 - if a salt used with hash u can only try dictionary attack or guess the salt value..
 - if the salt is routed,long and random...just forget about it :D


$_$ : Cross Site Request Forgery : 
 - being able to run unauthorized commands using trusted urls relations by running html file or by XSS 
 - beware of using GET and POST while writing expolitation code *if a confirmation prompt is required* 	
 - there's no possible way to do CSRF when tokens are used *unless u know the token used or found an XSS*
 - try searching for token security before giving up :D

#_# : Insecure Direct Object Reference : 
 - tampering a parameter to access a data base object with no authorization 
 - just remember to use burp intrauder for automation xD